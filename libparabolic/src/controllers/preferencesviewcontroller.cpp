#include "controllers/preferencesviewcontroller.h"
#include <libnick/app/aura.h>
#include "models/configuration.h"

using namespace Nickvision::App;
using namespace Nickvision::TubeConverter::Shared::Models;

namespace Nickvision::TubeConverter::Shared::Controllers
{
    const std::string& PreferencesViewController::getId() const
    {
        return Aura::getActive().getAppInfo().getId();
    }

    Theme PreferencesViewController::getTheme() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getTheme();
    }

    void PreferencesViewController::setTheme(Theme theme)
    {
        Aura::getActive().getConfig<Configuration>("config").setTheme(theme);
    }

    bool PreferencesViewController::getAutomaticallyCheckForUpdates() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getAutomaticallyCheckForUpdates();
    }

    void PreferencesViewController::setAutomaticallyCheckForUpdates(bool check)
    {
        Aura::getActive().getConfig<Configuration>("config").setAutomaticallyCheckForUpdates(check);
    }

    CompletedNotificationPreference PreferencesViewController::getCompletedNotificationPreference() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getCompletedNotificationPreference();
    }

    void PreferencesViewController::setCompletedNotificationPreference(CompletedNotificationPreference preference)
    {
        Aura::getActive().getConfig<Configuration>("config").setCompletedNotificationPreference(preference);
    }

    bool PreferencesViewController::getPreventSuspendWhenDownloading() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getPreventSuspendWhenDownloading();
    }

    void PreferencesViewController::setPreventSuspendWhenDownloading(bool prevent)
    {
        Aura::getActive().getConfig<Configuration>("config").setPreventSuspendWhenDownloading(prevent);
    }

    bool PreferencesViewController::getOverwriteExistingFiles() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getOverwriteExistingFiles();
    }

    void PreferencesViewController::setOverwriteExistingFiles(bool overwrite)
    {
        Aura::getActive().getConfig<Configuration>("config").setOverwriteExistingFiles(overwrite);
    }

    int PreferencesViewController::getMaxNumberOfActiveDownloads() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getMaxNumberOfActiveDownloads();
    }

    void PreferencesViewController::setMaxNumberOfActiveDownloads(int max)
    {
        Aura::getActive().getConfig<Configuration>("config").setMaxNumberOfActiveDownloads(max);
    }

    bool PreferencesViewController::getLimitCharacters() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getLimitCharacters();
    }

    void PreferencesViewController::setLimitCharacters(bool limit)
    {
        Aura::getActive().getConfig<Configuration>("config").setLimitCharacters(limit);
    }

    bool PreferencesViewController::getIncludeAutoGeneratedSubtitles() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getIncludeAutoGeneratedSubtitles();
    }

    void PreferencesViewController::setIncludeAutoGeneratedSubtitles(bool include)
    {
        Aura::getActive().getConfig<Configuration>("config").setIncludeAutoGeneratedSubtitles(include);
    }

    bool PreferencesViewController::getUseAria() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getUseAria();
    }

    void PreferencesViewController::setUseAria(bool useAria)
    {
        Aura::getActive().getConfig<Configuration>("config").setUseAria(useAria);
    }

    int PreferencesViewController::getAriaMaxConnectionsPerServer() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getAriaMaxConnectionsPerServer();
    }

    void PreferencesViewController::setAriaMaxConnectionsPerServer(int maxConnections)
    {
        Aura::getActive().getConfig<Configuration>("config").setAriaMaxConnectionsPerServer(maxConnections);
    }

    int PreferencesViewController::getAriaMinSplitSize() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getAriaMinSplitSize();
    }

    void PreferencesViewController::setAriaMinSplitSize(int minSplitSize)
    {
        Aura::getActive().getConfig<Configuration>("config").setAriaMinSplitSize(minSplitSize);
    }

    unsigned int PreferencesViewController::getSpeedLimit() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getSpeedLimit();
    }

    void PreferencesViewController::setSpeedLimit(unsigned int speedLimit)
    {
        Aura::getActive().getConfig<Configuration>("config").setSpeedLimit(speedLimit);
    }

    std::string PreferencesViewController::getProxyUrl() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getProxyUrl();
    }

    void PreferencesViewController::setProxyUrl(const std::string& proxyUrl)
    {
        Aura::getActive().getConfig<Configuration>("config").setProxyUrl(proxyUrl);
    }

    std::filesystem::path PreferencesViewController::getCookiesPath() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getCookiesPath();
    }

    void PreferencesViewController::setCookiesPath(const std::filesystem::path& cookiesPath)
    {
        Aura::getActive().getConfig<Configuration>("config").setCookiesPath(cookiesPath);
    }

    bool PreferencesViewController::getYouTubeSponsorBlock() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getYouTubeSponsorBlock();
    }

    void PreferencesViewController::setYouTubeSponsorBlock(bool sponsorBlock)
    {
        Aura::getActive().getConfig<Configuration>("config").setYouTubeSponsorBlock(sponsorBlock);
    }

    bool PreferencesViewController::getDisallowConversions() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getDisallowConversions();
    }

    void PreferencesViewController::setDisallowConversions(bool disallowConversions)
    {
        Aura::getActive().getConfig<Configuration>("config").setDisallowConversions(disallowConversions);
    }

    bool PreferencesViewController::getEmbedMetadata() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getEmbedMetadata();
    }

    void PreferencesViewController::setEmbedMetadata(bool embedMetadata)
    {
        Aura::getActive().getConfig<Configuration>("config").setEmbedMetadata(embedMetadata);
    }

    bool PreferencesViewController::getCropAudioThumbnails() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getCropAudioThumbnails();
    }

    void PreferencesViewController::setCropAudioThumbnails(bool cropAudioThumbnails)
    {
        Aura::getActive().getConfig<Configuration>("config").setCropAudioThumbnails(cropAudioThumbnails);
    }

    bool PreferencesViewController::getRemoveSourceData() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getRemoveSourceData();
    }

    void PreferencesViewController::setRemoveSourceData(bool removeSourceData)
    {
        Aura::getActive().getConfig<Configuration>("config").setRemoveSourceData(removeSourceData);
    }

    bool PreferencesViewController::getEmbedChapters() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getEmbedChapters();
    }

    void PreferencesViewController::setEmbedChapters(bool embedChapters)
    {
        Aura::getActive().getConfig<Configuration>("config").setEmbedChapters(embedChapters);
    }

    bool PreferencesViewController::getEmbedSubtitle() const
    {
        return Aura::getActive().getConfig<Configuration>("config").getEmbedSubtitle();
    }

    void PreferencesViewController::setEmbedSubtitle(bool embedSubtitle)
    {
        Aura::getActive().getConfig<Configuration>("config").setEmbedSubtitle(embedSubtitle);
    }

    void PreferencesViewController::saveConfiguration()
    {
        Aura::getActive().getLogger().log(Logging::LogLevel::Debug, "Config saved.");
        Aura::getActive().getConfig<Configuration>("config").save();
    }
}