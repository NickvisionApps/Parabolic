app_id := "org.nickvision.tubeconverter"
project_name := "NickvisionTubeConverter"

dotnet_runtime := if arch() == "arm" {
    "linux-arm"
} else if arch() == "aarch64" {
    "linux-arm64"
} else {
    "linux-x64"
}

builddir := env_var_or_default('NICK_BUILDDIR', '_nickbuild')
lib := "lib" # this is added to installation prefix, see "publish" recipe for details

# List all recipes
default:
    @just --list

# Run the application without installing
run:
    blueprint-compiler batch-compile Blueprints/ Blueprints/ Blueprints/*.blp
    dotnet build
    glib-compile-resources --sourcedir ./Resources \
    ./Resources/{{app_id}}.gresource.xml
    mv ./Resources/{{app_id}}.gresource ./bin/Debug/net7.0/
    dotnet run
    rm Blueprints/*.ui

# Publish the app
publish PREFIX LIB_DIR=lib: clean && (_install_extras PREFIX)
    #!/bin/sh
    # LIB_DIR id added to prefix.
    # For example, for PREFIX "/usr" and LIB_DIR "lib"
    # all dll and so files will go to "/usr/lib".
    # Resources will go to {{PREFIX}}/shared.
    # Build directory is "_nickbuild" by default,
    # use NICK_BUILDDIR env var to change it.

    echo -e "\033[1m# Publishing the app\033[0m"
    mkdir -p {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    blueprint-compiler batch-compile Blueprints/ Blueprints/ Blueprints/*.blp
    dotnet publish -c Release {{project_name}}.GNOME.csproj \
        --runtime {{dotnet_runtime}} \
        --self-contained false \
        -o {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    success=$?
    rm Blueprints/*.ui
    if [ $success != 0 ]
    then
        exit $success
    fi
    mkdir -p {{builddir}}{{PREFIX}}/bin
    cat > {{builddir}}{{PREFIX}}/bin/{{app_id}} << EOF
    #!/bin/sh
    exec dotnet {{PREFIX}}/{{LIB_DIR}}/{{app_id}}/{{project_name}}.GNOME.dll \$@
    EOF
    chmod +x {{builddir}}{{PREFIX}}/bin/{{app_id}}

# Publish the app (self-contained)
publish-self-contained PREFIX LIB_DIR=lib: clean && (_install_extras PREFIX)
    #!/bin/sh
    # LIB_DIR id added to prefix.
    # For example, for PREFIX "/usr" and LIB_DIR "lib"
    # all dll and so files will go to "/usr/lib".
    # Resources will go to {{PREFIX}}/shared.
    # Build directory is "_nickbuild" by default,
    # use NICK_BUILDDIR env var to change it.

    echo -e "\033[1m# Publishing the app (self-contained)\033[0m"
    mkdir -p {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    blueprint-compiler batch-compile Blueprints/ Blueprints/ Blueprints/*.blp
    dotnet publish -c Release {{project_name}}.GNOME.csproj \
        $([ -d "$FLATPAK_BUILDER_BUILDDIR/nuget-sources" ] && \
        echo "--source $FLATPAK_BUILDER_BUILDDIR/nuget-sources") \
        --runtime {{dotnet_runtime}} \
        --self-contained true \
        -o {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    success=$?
    rm Blueprints/*.ui
    if [ $success != 0 ]
    then
        exit $success
    fi
    mkdir -p {{builddir}}{{PREFIX}}/bin
    cat > {{builddir}}{{PREFIX}}/bin/{{app_id}} << EOF
    #!/bin/sh
    exec {{PREFIX}}/{{LIB_DIR}}/{{app_id}}/{{project_name}}.GNOME \$@
    EOF
    chmod +x {{builddir}}{{PREFIX}}/bin/{{app_id}}

# Install the app
install INSTALL_PREFIX="/":
    # Installing the app to {{INSTALL_PREFIX}}
    if [ ! -d {{INSTALL_PREFIX}} ]; then mkdir -p {{INSTALL_PREFIX}}; fi
    cp -r {{builddir}}/* {{INSTALL_PREFIX}}

# Clean build directory
clean:
    # Cleaning build directory
    @rm -r {{builddir}} &> /dev/null; exit 0

# Command to be used in flatpak manifest
publish-flatpak: (publish-self-contained "/app") install

# Command to be used in snap YAML
install-snap PREFIX="/usr":
    @set +u; [ -n "$TC_PYTHON_SO" ] || (echo "Environment variable TC_PYTHON_SO is not set, aborting."; exit 1)
    just install /root/prime/
    sed -i "2 i export TC_PYTHON_SO=$TC_PYTHON_SO" /root/prime{{PREFIX}}/bin/{{app_id}}

_install_extras PREFIX: && (_translate_meta PREFIX)
    # Installing icons
    mkdir -p {{builddir}}{{PREFIX}}/share/icons/hicolor/scalable/apps
    cp ../{{project_name}}.Shared/Resources/{{app_id}}.svg \
        {{builddir}}{{PREFIX}}/share/icons/hicolor/scalable/apps/
    cp ../{{project_name}}.Shared/Resources/{{app_id}}-devel.svg \
        {{builddir}}{{PREFIX}}/share/icons/hicolor/scalable/apps/
    mkdir -p {{builddir}}{{PREFIX}}/share/icons/hicolor/symbolic/apps
    cp ../{{project_name}}.Shared/Resources/{{app_id}}-symbolic.svg \
        {{builddir}}{{PREFIX}}/share/icons/hicolor/symbolic/apps/

    # Installing GResource
    mkdir -p {{builddir}}{{PREFIX}}/share/{{app_id}}
    glib-compile-resources --sourcedir ./Resources ./Resources/{{app_id}}.gresource.xml
    mv ./Resources/{{app_id}}.gresource \
        {{builddir}}{{PREFIX}}/share/{{app_id}}/

    # Installing desktop file
    mkdir -p {{builddir}}{{PREFIX}}/share/applications
    cp ./{{app_id}}.desktop {{builddir}}{{PREFIX}}/share/applications/
    desktop-file-edit --set-key='Exec' \
    --set-value='{{PREFIX}}/bin/{{app_id}}' \
    {{builddir}}{{PREFIX}}/share/applications/{{app_id}}.desktop

    # Installing DBUS service
    mkdir -p {{builddir}}{{PREFIX}}/share/dbus-1/services
    cat > {{builddir}}{{PREFIX}}/share/dbus-1/services/{{app_id}}.service << EOF{{"\n"}}\
    [D-BUS Service]{{"\n"}}\
    Name={{app_id}}{{"\n"}}\
    Exec={{PREFIX}}/bin/{{app_id}} --gapplication-service{{"\n"}}\
    EOF

    # Installing metainfo
    mkdir -p {{builddir}}{{PREFIX}}/share/metainfo
    cp ./{{app_id}}.metainfo.xml {{builddir}}{{PREFIX}}/share/metainfo/

_translate_meta PREFIX:
    #!/usr/bin/env python3
    import os
    import re
    import xml.etree.ElementTree as ET
    from pathlib import Path

    print("\033[1m# Translating desktop and metainfo files\033[0m")
    resx_dir = (Path(os.getcwd()) / '../{{project_name}}.Shared/Resources/').resolve()
    regex = re.compile(r'Strings\.(.+)\.resx')
    desktop_comments = []
    desktop_keywords = []
    meta_summaries = []
    meta_descriptions = []
    for filename in os.listdir(resx_dir):
        regex_match = regex.search(filename)
        if regex_match:
            lang_code = regex_match.group(1)
            tree = ET.parse(f'{resx_dir}/{filename}')
            root = tree.getroot()
            for item in root.findall('./data'):
                if item.attrib['name'] == 'Description':
                    text = item.find('value').text
                    if text:
                        desktop_comments.append(f'Comment[{lang_code}]={text}')
                        meta_descriptions.append(f'    <p xml:lang="{lang_code}">\n      {text}\n    </p>')
                elif item.attrib['name'] == 'Summary.GTK':
                    text = item.find('value').text
                    if text:
                        meta_summaries.append(f'  <summary xml:lang="{lang_code}">{text}</summary>')
                elif item.attrib['name'] == 'Keywords.GTK':
                    text = item.find('value').text
                    if text:
                        desktop_keywords.append(f'Keywords[{lang_code}]={text}')
    desktop_comments.sort()
    desktop_keywords.sort()
    meta_summaries.sort()
    meta_descriptions.sort()

    with open('{{builddir}}{{PREFIX}}/share/applications/{{app_id}}.desktop', 'r') as f:
        contents = f.readlines()
        new_contents = contents.copy()
    j = 0
    for i in range(len(contents)):
        if contents[i].startswith('Comment='):
            new_contents.insert(j + 1, "\n".join(desktop_comments) + "\n")
            j += 1
        elif contents[i].startswith('Keywords='):
            new_contents.insert(j + 1, "\n".join(desktop_keywords) + "\n")
            j += 1
        j += 1
    with open('{{builddir}}{{PREFIX}}/share/applications/{{app_id}}.desktop', 'w') as f:
        new_contents = "".join(new_contents)
        f.write(new_contents)

    with open('{{builddir}}{{PREFIX}}/share/metainfo/{{app_id}}.metainfo.xml', 'r') as f:
        contents = f.readlines()
        new_contents = contents.copy()
    j = 0
    for i in range(len(contents)):
        if contents[i].find('<summary>') > -1:
            new_contents.insert(j + 1, "\n".join(meta_summaries) + "\n")
            j += 1
        elif contents[i].find('<description>') > -1:
            new_contents.insert(j + 4, "\n".join(meta_descriptions) + "\n")
            break
        j += 1
    with open('{{builddir}}{{PREFIX}}/share/metainfo/{{app_id}}.metainfo.xml', 'w') as f:
        new_contents = "".join(new_contents)
        f.write(new_contents)

# Generate sources files for Flatpak
generate-flatpak-sources: _generate-flatpak-sources-just _generate-flatpak-sources-dotnet

_generate-flatpak-sources-just:
    # Generating sources for just
    curl "https://raw.githubusercontent.com/casey/just/baa2dfcc6f180d123672544c5ed1aedc32608228/Cargo.lock" -o ./Cargo.lock
    flatpak-cargo-generator.py -o cargo-sources.json ./Cargo.lock
    rm ./Cargo.lock

_generate-flatpak-sources-dotnet:
    # Generating sources for dotnet
    flatpak-dotnet-generator.py nuget-sources.json {{project_name}}.GNOME.csproj