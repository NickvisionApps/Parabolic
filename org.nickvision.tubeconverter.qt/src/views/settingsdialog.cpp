#include "views/settingsdialog.h"
#include "ui_settingsdialog.h"
#include <QDesktopServices>
#include <QFileDialog>
#include <QMessageBox>
#include <libnick/localization/gettext.h>

using namespace Nickvision::TubeConverter::Shared::Controllers;
using namespace Nickvision::TubeConverter::Shared::Models;

namespace Nickvision::TubeConverter::QT::Views
{
    SettingsDialog::SettingsDialog(const std::shared_ptr<PreferencesViewController>& controller, QWidget* parent)
        : QDialog{ parent },
        m_ui{ new Ui::SettingsDialog() },
        m_controller{ controller }
    {
        m_ui->setupUi(this);
        setWindowTitle(_("Settings"));
        //Localize Strings
        m_ui->listPages->addItem(_("User Interface"));
        m_ui->listPages->addItem(_("Downloads"));
        m_ui->listPages->addItem(_("Downloader"));
        m_ui->listPages->addItem(_("Converter"));
        m_ui->listPages->addItem(_("aria2"));
        m_ui->lblUpdates->setText(_("Automatically Check for Updates"));
        m_ui->lblCompletedNotificationTrigger->setText(_("Completed Notification Trigger"));
        m_ui->cmbCompletedNotificationTrigger->addItem(_("For each download"));
        m_ui->cmbCompletedNotificationTrigger->addItem(_("When all downloads finish"));
        m_ui->cmbCompletedNotificationTrigger->addItem(_("Never"));
        m_ui->lblPreventSuspend->setText(_("Prevent Suspend"));
        m_ui->lblHistoryLength->setText(_("Download History Length"));
        m_ui->cmbHistoryLength->addItem(_("Never"));
        m_ui->cmbHistoryLength->addItem(_("One Day"));
        m_ui->cmbHistoryLength->addItem(_("One Week"));
        m_ui->cmbHistoryLength->addItem(_("One Month"));
        m_ui->cmbHistoryLength->addItem(_("Three Months"));
        m_ui->cmbHistoryLength->addItem(_("Forever"));
        m_ui->lblOverwriteExistingFiles->setText(_("Overwrite Existing Files"));
        m_ui->lblMaxNumberOfActiveDownloads->setText(_("Max Number of Active Downloads"));
        for(int i = 1; i <= 10; i++)
        {
            m_ui->cmbMaxNumberOfActiveDownloads->addItem(QString::number(i));
        }
        m_ui->lblIncludeAutoGeneratedSubtitles->setText(_("Include Auto-Generated Subtitles"));
        m_ui->lblSpeedLimit->setText(_("Speed Limit"));
        m_ui->lblSpeedLimit->setToolTip(_("This limit is applied only to downloads that have enabled limiting download speed."));
        m_ui->numSpeedLimit->setToolTip(_("This limit is applied only to downloads that have enabled limiting download speed."));
        m_ui->lblSponsorBlock->setText(_("Use SponsorBlock for YouTube"));
        m_ui->lblProxyUrl->setText(_("Proxy URL"));
        m_ui->txtProxyUrl->setPlaceholderText(_("Enter proxy url here"));
        m_ui->lblCookiesFile->setText(_("Cookies File"));
        m_ui->txtCookiesFile->setPlaceholderText(_("Select cookies file"));
        m_ui->btnSelectCookiesFile->setText(_("Select Cookies File"));
        m_ui->btnClearCookiesFile->setText(_("Clear Cookies File"));
        m_ui->btnCookiesFileInformation->setText(_("Cookies File Information"));
        m_ui->lblEmbedMetadata->setText(_("Embed Metadata"));
        m_ui->lblEmbedSubtitles->setText(_("Embed Subtitles"));
        m_ui->lblEmbedChapters->setText(_("Embed Chapters"));
        m_ui->lblCropAudioThumbnails->setText(_("Crop Audio Thumbnails"));
        m_ui->lblCropAudioThumbnails->setToolTip(_("If enabled, Parabolic will crop the thumbnails of audio files to squares."));
        m_ui->chkCropAudioThumbnails->setToolTip(_("If enabled, Parabolic will crop the thumbnails of audio files to squares."));
        m_ui->lblRemoveSourceData->setText(_("Remove Source Data"));
        m_ui->lblRemoveSourceData->setToolTip(_("If enabled, Parabolic will clear metadata fields containing identifying download information."));
        m_ui->chkRemoveSourceData->setToolTip(_("If enabled, Parabolic will clear metadata fields containing identifying download information."));
        m_ui->lblUseAria->setText(_("Use aria2"));
        m_ui->lblAriaMaximumConnectionsPerServer->setText(_("Max Connections Per Server (-x)"));
        m_ui->lblAriaMinSplitSize->setText(_("Minimum Split Size (-k)"));
        m_ui->lblAriaMinSplitSize->setToolTip(_("The minimum size of which to split a file (in MiB)."));
        m_ui->numAriaMinSplitSize->setToolTip(_("The minimum size of which to split a file (in MiB)."));
        //Load Settings
        DownloaderOptions options{ m_controller->getDownloaderOptions() };
        m_ui->chkUpdates->setChecked(m_controller->getAutomaticallyCheckForUpdates());
        m_ui->cmbCompletedNotificationTrigger->setCurrentIndex(static_cast<int>(m_controller->getCompletedNotificationPreference()));
        m_ui->chkPreventSuspend->setChecked(m_controller->getPreventSuspend());
        m_ui->cmbHistoryLength->setCurrentIndex(static_cast<int>(m_controller->getHistoryLengthIndex()));
        m_ui->chkOverwriteExistingFiles->setChecked(options.getOverwriteExistingFiles());
        m_ui->cmbMaxNumberOfActiveDownloads->setCurrentIndex(options.getMaxNumberOfActiveDownloads() - 1);
        m_ui->chkIncludeAutoGeneratedSubtitles->setChecked(options.getIncludeAutoGeneratedSubtitles());
        m_ui->numSpeedLimit->setValue(options.getSpeedLimit());
        m_ui->chkSponsorBlock->setChecked(options.getYouTubeSponsorBlock());
        m_ui->txtProxyUrl->setText(QString::fromStdString(options.getProxyUrl()));
        m_ui->txtCookiesFile->setText(QString::fromStdString(options.getCookiesPath().string()));
        m_ui->chkEmbedMetadata->setChecked(options.getEmbedMetadata());
        m_ui->chkEmbedSubtitles->setChecked(options.getEmbedSubtitles());
        m_ui->chkEmbedChapters->setChecked(options.getEmbedChapters());
        m_ui->chkCropAudioThumbnails->setChecked(options.getCropAudioThumbnails());
        m_ui->chkRemoveSourceData->setChecked(options.getRemoveSourceData());
        m_ui->chkUseAria->setChecked(options.getUseAria());
        m_ui->numAriaMaxConnectionsPerServer->setValue(options.getAriaMaxConnectionsPerServer());
        m_ui->numAriaMinSplitSize->setValue(options.getAriaMinSplitSize());
        //Signals
        connect(m_ui->listPages, &QListWidget::currentRowChanged, this, &SettingsDialog::onPageChanged);
        connect(m_ui->btnSelectCookiesFile, &QPushButton::clicked, this, &SettingsDialog::selectCookiesFile);
        connect(m_ui->btnClearCookiesFile, &QPushButton::clicked, this, &SettingsDialog::clearCookiesFile);
        connect(m_ui->btnCookiesFileInformation, &QPushButton::clicked, this, &SettingsDialog::cookiesFileInformation);
        m_ui->listPages->setCurrentRow(0);
    }
    
    SettingsDialog::~SettingsDialog()
    {
        delete m_ui;
    }

    void SettingsDialog::closeEvent(QCloseEvent* event)
    {
        DownloaderOptions options{ m_controller->getDownloaderOptions() };
        m_controller->setAutomaticallyCheckForUpdates(m_ui->chkUpdates->isChecked());
        m_controller->setCompletedNotificationPreference(static_cast<CompletedNotificationPreference>(m_ui->cmbCompletedNotificationTrigger->currentIndex()));
        m_controller->setPreventSuspend(m_ui->chkPreventSuspend->isChecked());
        m_controller->setHistoryLengthIndex(m_ui->cmbHistoryLength->currentIndex());
        options.setOverwriteExistingFiles(m_ui->chkOverwriteExistingFiles->isChecked());
        options.setMaxNumberOfActiveDownloads(m_ui->cmbMaxNumberOfActiveDownloads->currentIndex() + 1);
        options.setIncludeAutoGeneratedSubtitles(m_ui->chkIncludeAutoGeneratedSubtitles->isChecked());
        options.setSpeedLimit(m_ui->numSpeedLimit->value());
        options.setYouTubeSponsorBlock(m_ui->chkSponsorBlock->isChecked());
        options.setProxyUrl(m_ui->txtProxyUrl->text().toStdString());
        options.setCookiesPath(m_ui->txtCookiesFile->text().toStdString());
        options.setEmbedMetadata(m_ui->chkEmbedMetadata->isChecked());
        options.setEmbedSubtitles(m_ui->chkEmbedSubtitles->isChecked());
        options.setEmbedChapters(m_ui->chkEmbedChapters->isChecked());
        options.setCropAudioThumbnails(m_ui->chkCropAudioThumbnails->isChecked());
        options.setRemoveSourceData(m_ui->chkRemoveSourceData->isChecked());
        options.setUseAria(m_ui->chkUseAria->isChecked());
        options.setAriaMaxConnectionsPerServer(m_ui->numAriaMaxConnectionsPerServer->value());
        options.setAriaMinSplitSize(m_ui->numAriaMinSplitSize->value());
        m_controller->setDownloaderOptions(options);
        event->accept();
    }

    void SettingsDialog::onPageChanged(int index)
    {
        m_ui->viewStack->setCurrentIndex(index);
    }

    void SettingsDialog::selectCookiesFile()
    {
        QString path{ QFileDialog::getOpenFileName(this, _("Select Cookies File"), {}, _("Text files (*.txt)")) };
        if(!path.isEmpty())
        {
            m_ui->txtCookiesFile->setText(path);
        }
    }

    void SettingsDialog::clearCookiesFile()
    {
        m_ui->txtCookiesFile->clear();
    }

    void SettingsDialog::cookiesFileInformation()
    {
        QMessageBox box{ QMessageBox::Icon::Information, _("Cookies File Information"), _("Cookies can be passed to yt-dlp in the form of TXT files. Cookies may allow yt-dlp to access media that requires a login. Export cookies from your browser using the following extensions (use at your own risk):"), QMessageBox::StandardButton::Close, this };
        QPushButton* btnChrome{ box.addButton(_("Chrome/Edge"), QMessageBox::ButtonRole::ActionRole) };
        QPushButton* btnFirefox{ box.addButton(_("Firefox"), QMessageBox::ButtonRole::ActionRole) };
        connect(btnChrome, &QPushButton::clicked, [this](){ QDesktopServices::openUrl({ QString::fromStdString(m_controller->getCookiesExtensionUrl(Browsers::Chrome)) }); });
        connect(btnFirefox, &QPushButton::clicked, [this](){ QDesktopServices::openUrl({ QString::fromStdString(m_controller->getCookiesExtensionUrl(Browsers::Firefox)) }); });
        box.exec();
    }
}