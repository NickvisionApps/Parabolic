#include "SettingsPage.xaml.h"
#if __has_include("SettingsPage.g.cpp")
#include "SettingsPage.g.cpp"
#endif
#include <libnick/localization/gettext.h>

using namespace ::Nickvision::TubeConverter::Shared::Controllers;
using namespace ::Nickvision::TubeConverter::Shared::Models;
using namespace winrt::Microsoft::UI::Xaml;
using namespace winrt::Microsoft::UI::Xaml::Controls;
using namespace winrt::Windows::Storage;
using namespace winrt::Windows::Storage::Pickers;
using namespace winrt::Windows::System;

namespace winrt::Nickvision::TubeConverter::WinUI::implementation 
{
    SettingsPage::SettingsPage()
        : m_constructing{ true }
    {
        InitializeComponent();
        //Localize Strings
        LblTitle().Text(winrt::to_hstring(_("Settings")));
        LblAppearanceBehavior().Text(winrt::to_hstring(_("Appearance & behavior")));
        RowTheme().Title(winrt::to_hstring(_("Theme")));
        CmbTheme().Items().Append(winrt::box_value(winrt::to_hstring(_p("Theme", "Light"))));
        CmbTheme().Items().Append(winrt::box_value(winrt::to_hstring(_p("Theme", "Dark"))));
        CmbTheme().Items().Append(winrt::box_value(winrt::to_hstring(_p("Theme", "System"))));
        RowAutomaticallyCheckForUpdates().Title(winrt::to_hstring(_("Automatically Check for Updates")));
        TglAutomaticallyCheckForUpdates().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglAutomaticallyCheckForUpdates().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowCompletedNotificationTrigger().Title(winrt::to_hstring(_("Completed Notification Trigger")));
        CmbCompletedNotificationTrigger().Items().Append(winrt::box_value(winrt::to_hstring(_("For each download"))));
        CmbCompletedNotificationTrigger().Items().Append(winrt::box_value(winrt::to_hstring(_("When all downloads finish"))));
        CmbCompletedNotificationTrigger().Items().Append(winrt::box_value(winrt::to_hstring(_("Never"))));
        RowPreventSuspend().Title(winrt::to_hstring(_("Prevent Suspend When Downloading")));
        TglPreventSuspend().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglPreventSuspend().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        LblDownloads().Text(winrt::to_hstring(_("Downloads")));
        RowOverwriteExistingFiles().Title(winrt::to_hstring(_("Overwrite Existing Files")));
        RowMaxNumberOfActiveDownloads().Title(winrt::to_hstring(_("Max Number of Active Downloads")));
        for(int i = 1; i <= 10; i++)
        {
            CmbMaxNumberOfActiveDownloads().Items().Append(winrt::box_value(winrt::to_hstring(i)));
        }
        RowIncludeAutoGeneratedSubtitles().Title(winrt::to_hstring(_("Include Auto-Generated Subtitles")));
        TglIncludeAutoGeneratedSubtitles().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglIncludeAutoGeneratedSubtitles().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        LblDownloader().Text(winrt::to_hstring(_("Downloader")));
        RowSpeedLimit().Title(winrt::to_hstring(_("Speed Limit")));
        RowSpeedLimit().Description(winrt::to_hstring(_("This limit (in KiB/s) is applied to downloads that have speed limit enabled. Changing the value doesn't affect already running downloads.")));
        RowSponsorBlock().Title(winrt::to_hstring(_("Use SponsorBlock for YouTube")));
        TglSponsorBlock().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglSponsorBlock().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowProxyUrl().Title(winrt::to_hstring(_("Proxy URL")));
        TxtProxyUrl().PlaceholderText(winrt::to_hstring(_("Enter proxy URL here")));
        RowCookiesFile().Title(winrt::to_hstring(_("Cookies File")));
        RowCookiesFile().Description(winrt::to_hstring(_("A cookies file can be provided to Parabolic to allow downloading media that requires a login.")));
        ToolTipService::SetToolTip(BtnSelectCookiesFile(), winrt::box_value(winrt::to_hstring(_("Select Cookies File"))));
        ToolTipService::SetToolTip(BtnClearCookiesFile(), winrt::box_value(winrt::to_hstring(_("Clear Cookies File"))));
        ToolTipService::SetToolTip(BtnInfoCookiesFile(), winrt::box_value(winrt::to_hstring(_("Cookies File Information"))));
        LblInfoCookiesFile().Text(winrt::to_hstring(_("Cookies can be passed to yt-dlp in the form of TXT files. Export cookies from your browser using the following extensions (use at your own risk):")));
        BtnCookiesChrome().Content(winrt::box_value(winrt::to_hstring(_("Chrome/Edge"))));
        BtnCookiesFirefox().Content(winrt::box_value(winrt::to_hstring(_("Firefox"))));
        LblConverter().Text(winrt::to_hstring(_("Converter")));
        RowDisallowConversions().Title(winrt::to_hstring(_("Disallow Conversions")));
        RowDisallowConversions().Description(winrt::to_hstring(_("If enabled, Parabolic will download the appropriate video/audio format for the selected quality without converting to other formats.")));
        TglDisallowConversions().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglDisallowConversions().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowEmbedMetadata().Title(winrt::to_hstring(_("Embed Metadata")));
        TglEmbedMetadata().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglEmbedMetadata().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowEmbedSubtitles().Title(winrt::to_hstring(_("Embed Subtitles")));
        TglEmbedSubtitles().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglEmbedSubtitles().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowEmbedChapters().Title(winrt::to_hstring(_("Embed Chapters")));
        TglEmbedChapters().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglEmbedChapters().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowCropAudioThumbnails().Title(winrt::to_hstring(_("Crop Audio Thumbnails")));
        RowCropAudioThumbnails().Description(winrt::to_hstring(_("If enabled, Parabolic will crop the thumbnails of audio files to squares.")));
        TglCropAudioThumbnails().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglCropAudioThumbnails().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowRemoveSourceData().Title(winrt::to_hstring(_("Remove Source Data")));
        RowRemoveSourceData().Description(winrt::to_hstring(_("If enabled, Parabolic will clear metadata fields containing the URL and other identifying information of a download.")));
        TglRemoveSourceData().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglRemoveSourceData().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        LblAria().Text(winrt::to_hstring(_("aria2")));
        RowUseAria().Title(winrt::to_hstring(_("Use aria2")));
        RowUseAria().Description(winrt::to_hstring(_("Enable to use aria2 downloader. It can be faster, but you will not see download progress.")));
        TglUseAria().OnContent(winrt::box_value(winrt::to_hstring(_("On"))));
        TglUseAria().OffContent(winrt::box_value(winrt::to_hstring(_("Off"))));
        RowAriaMaxConnectionsPerServer().Title(winrt::to_hstring(_("Max Connections Per Server (-x)")));
        RowAriaMinSplitSize().Title(winrt::to_hstring(_("Minimum Split Size (-k)")));
        RowAriaMinSplitSize().Description(winrt::to_hstring(_("The minimum size of which to split a file (in MiB).")));
    }

    void SettingsPage::SetController(const std::shared_ptr<PreferencesViewController>& controller, HWND hwnd)
    {
        m_controller = controller;
        m_hwnd = hwnd;
        //Load
        m_constructing = true;
        CmbTheme().SelectedIndex(static_cast<int>(m_controller->getTheme()));
        TglAutomaticallyCheckForUpdates().IsOn(m_controller->getAutomaticallyCheckForUpdates());
        CmbCompletedNotificationTrigger().SelectedIndex(static_cast<int>(m_controller->getCompletedNotificationPreference()));
        TglPreventSuspend().IsOn(m_controller->getPreventSuspendWhenDownloading());
        TglOverwriteExistingFiles().IsOn(m_controller->getOverwriteExistingFiles());
        CmbMaxNumberOfActiveDownloads().SelectedIndex(m_controller->getMaxNumberOfActiveDownloads() - 1);
        TglIncludeAutoGeneratedSubtitles().IsOn(m_controller->getIncludeAutoGeneratedSubtitles());
        NumSpeedLimit().Value(static_cast<double>(m_controller->getSpeedLimit()));
        TglSponsorBlock().IsOn(m_controller->getYouTubeSponsorBlock());
        TxtProxyUrl().Text(winrt::to_hstring(m_controller->getProxyUrl()));
        LblCookiesFile().Text(m_controller->getCookiesPath().empty() ? winrt::to_hstring(_("No file selected")) : winrt::to_hstring(m_controller->getCookiesPath().filename().string()));
        TglDisallowConversions().IsOn(m_controller->getDisallowConversions());
        TglEmbedMetadata().IsOn(m_controller->getEmbedMetadata());
        TglEmbedSubtitles().IsOn(m_controller->getEmbedSubtitles());
        TglEmbedChapters().IsOn(m_controller->getEmbedChapters());
        TglCropAudioThumbnails().IsOn(m_controller->getCropAudioThumbnails());
        TglRemoveSourceData().IsOn(m_controller->getRemoveSourceData());
        TglUseAria().IsOn(m_controller->getUseAria());
        NumAriaMaxConnectionsPerServer().Value(static_cast<double>(m_controller->getAriaMaxConnectionsPerServer()));
        NumAriaMinSplitSize().Value(static_cast<double>(m_controller->getAriaMinSplitSize()));
        m_constructing = false;
    }

    void SettingsPage::OnCmbChanged(const IInspectable& sender, const SelectionChangedEventArgs& args)
    {
        ApplyChanges();
    }

    void SettingsPage::OnSwitchToggled(const IInspectable& sender, const RoutedEventArgs& args)
    {
        ApplyChanges();
    }

    void SettingsPage::OnNumChanged(const NumberBox& sender, const NumberBoxValueChangedEventArgs& args)
    {
        ApplyChanges();
    }

    void SettingsPage::OnTextChanged(const IInspectable& sender, const TextChangedEventArgs& args)
    {
        ApplyChanges();
    }

    Windows::Foundation::IAsyncAction SettingsPage::SelectCookiesFile(const IInspectable& sender, const RoutedEventArgs& args)
    {
        FileOpenPicker picker;
        picker.as<::IInitializeWithWindow>()->Initialize(m_hwnd);
        picker.SuggestedStartLocation(PickerLocationId::DocumentsLibrary);
        picker.FileTypeFilter().Append(L".txt");
        picker.FileTypeFilter().Append(L".TXT");
        StorageFile file{ co_await picker.PickSingleFileAsync() };
        if(file)
        {
            m_controller->setCookiesPath(winrt::to_string(file.Path()));
            m_controller->saveConfiguration();
            LblCookiesFile().Text(winrt::to_hstring(m_controller->getCookiesPath().filename().string()));
        }
    }

    void SettingsPage::ClearCookiesFile(const IInspectable& sender, const RoutedEventArgs& args)
    {
        m_controller->setCookiesPath("");
        m_controller->saveConfiguration();
        LblCookiesFile().Text(winrt::to_hstring(_("No file selected")));
    }

    Windows::Foundation::IAsyncAction SettingsPage::CookiesChrome(const IInspectable& sender, const RoutedEventArgs& args)
    {
        co_await Launcher::LaunchUriAsync(Windows::Foundation::Uri{ winrt::to_hstring(m_controller->getCookiesExtensionUrl(Browsers::Chrome)) });
    }

    Windows::Foundation::IAsyncAction SettingsPage::CookiesFirefox(const IInspectable& sender, const RoutedEventArgs& args)
    {
        co_await Launcher::LaunchUriAsync(Windows::Foundation::Uri{ winrt::to_hstring(m_controller->getCookiesExtensionUrl(Browsers::Firefox)) });
    }

    void SettingsPage::ApplyChanges()
    {
        if(!m_constructing)
        {
            if(m_controller->getTheme() != static_cast<Theme>(CmbTheme().SelectedIndex()))
            {
                m_controller->setTheme(static_cast<Theme>(CmbTheme().SelectedIndex()));
            }
            m_controller->setAutomaticallyCheckForUpdates(TglAutomaticallyCheckForUpdates().IsOn());
            m_controller->setCompletedNotificationPreference(static_cast<CompletedNotificationPreference>(CmbCompletedNotificationTrigger().SelectedIndex()));
            m_controller->setPreventSuspendWhenDownloading(TglPreventSuspend().IsOn());
            m_controller->setOverwriteExistingFiles(TglOverwriteExistingFiles().IsOn());
            m_controller->setMaxNumberOfActiveDownloads(CmbMaxNumberOfActiveDownloads().SelectedIndex() + 1);
            m_controller->setIncludeAutoGeneratedSubtitles(TglIncludeAutoGeneratedSubtitles().IsOn());
            m_controller->setSpeedLimit(static_cast<int>(NumSpeedLimit().Value()));
            m_controller->setYouTubeSponsorBlock(TglSponsorBlock().IsOn());
            m_controller->setProxyUrl(winrt::to_string(TxtProxyUrl().Text()));
            m_controller->setDisallowConversions(TglDisallowConversions().IsOn());
            m_controller->setEmbedMetadata(TglEmbedMetadata().IsOn());
            m_controller->setEmbedSubtitles(TglEmbedSubtitles().IsOn());
            m_controller->setEmbedChapters(TglEmbedChapters().IsOn());
            m_controller->setCropAudioThumbnails(TglCropAudioThumbnails().IsOn());
            m_controller->setRemoveSourceData(TglRemoveSourceData().IsOn());
            m_controller->setUseAria(TglUseAria().IsOn());
            m_controller->setAriaMaxConnectionsPerServer(static_cast<int>(NumAriaMaxConnectionsPerServer().Value()));
            m_controller->setAriaMinSplitSize(static_cast<int>(NumAriaMinSplitSize().Value()));
            m_controller->saveConfiguration();
        }
    }
}
